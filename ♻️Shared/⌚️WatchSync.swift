//import WatchConnectivity
import HealthKit

struct ðŸ„²ontext: Codable, Equatable {
    var amount50g: Bool
    var ableBMI: Bool
    var ableBodyFat: Bool
    var ableLBM: Bool
    var massKilogramValue: Double?
    var heightMeterValue: Double?
    var bodyFatCountValue: Double?
    
    var asData: Data { try! JSONEncoder().encode(self) }
    
    func save() {
        NSUbiquitousKeyValueStore.default.set(self.asData, forKey: "â“’ontext")
    }
    
    static func load() -> Self? {
        if let â“žbject = NSUbiquitousKeyValueStore.default.object(forKey: "â“’ontext") {
            if let â““ata = â“žbject as? Data {
                return try? JSONDecoder().decode(Self.self, from: â““ata)
            }
        }
        return nil
    }
    
    var massQuantity: HKQuantity? {
        guard let â“œassKilogramValue = self.massKilogramValue else { return nil }
        return HKQuantity(unit: .gramUnit(with: .kilo), doubleValue: â“œassKilogramValue)
    }
    var heightSample: HKQuantitySample? {
        guard let â“—eightMetarValue = self.heightMeterValue else { return nil }
        return HKQuantitySample(type: HKQuantityType(.height),
                                quantity: HKQuantity(unit: .meter(), doubleValue: â“—eightMetarValue),
                                start: .now, end: .now)
    }
    var bodyFatQuantity: HKQuantity? {
        guard let â“‘odyFatCountValue = self.bodyFatCountValue else { return nil }
        return HKQuantity(unit: .count(), doubleValue: â“‘odyFatCountValue)
    }
    
    //func send() {
    //    do {
    //        let â““ictionary = ["â“’ontext": try JSONEncoder().encode(self)]
    //        if WCSession.default.isReachable {
    //            WCSession.default.sendMessage(â““ictionary, replyHandler: nil)
    //        } else {
    //            try WCSession.default.updateApplicationContext(â““ictionary)
    //        }
    //    } catch {
    //        print("ðŸš¨", #function, error.localizedDescription)
    //    }
    //}
    //
    //static func receive(_ â““ictionary: [String : Any]) -> Self? {
    //    if let â““ata = â““ictionary["â“’ontext"] as? Data {
    //        do {
    //            return try JSONDecoder().decode(Self.self, from: â““ata)
    //
    //        } catch {
    //            print("ðŸš¨", #function, error.localizedDescription)
    //        }
    //    }
    //    return nil
    //}
}
