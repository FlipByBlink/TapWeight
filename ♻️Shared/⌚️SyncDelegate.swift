import SwiftUI
import WatchConnectivity

class üÖÇyncDelegate: NSObject, WCSessionDelegate, ObservableObject {
    @AppStorage("Amount50g") var üö©amount50g: Bool = false
    @AppStorage("AbleBMI") var üö©ableBMI: Bool = false
    @AppStorage("AbleBodyFat") var üö©ableBodyFat: Bool = false
    @AppStorage("AbleLBM") var üö©ableLBM: Bool = false
    
    //MARK: Required(watchOS, iOS)
    func session(_ session: WCSession, activationDidCompleteWith activationState: WCSessionActivationState, error: Error?) {
        print(#function, ": Nothing to do.")
    }
    
    func ‚ì¢ync() {
        do {
            try WCSession.default.updateApplicationContext(["Amount50g": self.üö©amount50g,
                                                            "AbleBMI": self.üö©ableBMI,
                                                            "AbleBodyFat": self.üö©ableBodyFat,
                                                            "AbleLBM": self.üö©ableLBM,])
        } catch {
            print("üö®", error.localizedDescription)
        }
    }
}

#if os(iOS)
extension üÖÇyncDelegate: UIApplicationDelegate {
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool {
        if WCSession.isSupported() {
            WCSession.default.delegate = self
            WCSession.default.activate()
        }
        return true
    }
}

extension üÖÇyncDelegate {
    //MARK: Required
    func sessionDidBecomeInactive(_ session: WCSession) {
        print("\(#function): activationState = \(session.activationState.rawValue). Nothing to do.")
    }
    
    //MARK: Required
    func sessionDidDeactivate(_ session: WCSession) {
        session.activate()
    }
}
#endif

#if os(watchOS)
extension üÖÇyncDelegate: WKApplicationDelegate {
    func applicationDidBecomeActive() {
        if WCSession.isSupported() {
            WCSession.default.delegate = self
            WCSession.default.activate()
        }
    }
}

extension üÖÇyncDelegate {
    func session(_ session: WCSession, didReceiveApplicationContext applicationContext: [String : Any]) {
        print("üñ®Ô∏è", #function, applicationContext.description)
        Task { @MainActor in
            if let ‚ì•alue = applicationContext["Amount50g"] as? Bool {
                self.üö©amount50g = ‚ì•alue
            }
            if let ‚ì•alue = applicationContext["AbleBMI"] as? Bool {
                self.üö©ableBMI = ‚ì•alue
            }
            if let ‚ì•alue = applicationContext["AbleBodyFat"] as? Bool {
                self.üö©ableBodyFat = ‚ì•alue
            }
            if let ‚ì•alue = applicationContext["AbleLBM"] as? Bool {
                self.üö©ableLBM = ‚ì•alue
            }
        }
    }
}
#endif
