
import SwiftUI

struct ðŸ•˜LocalHistoryView: View {
    @EnvironmentObject var ðŸ“±: ðŸ“±AppModel
        
    var body: some View {
        List {
            Section {
                Text("\"Local history\" is for the porpose of \"operation check\" / \"temporary backup\"")
                    .font(.subheadline)
                    .foregroundStyle(.secondary)
                    .listRowBackground(Color.clear)
            }
            
            ForEach(ðŸ“±.ðŸ’½LocalHistory.â“›ogs.reversed()) { â“›og in
                Section {
                    ðŸ„»ogRows(â“›og)
                } header: {
                    Text(â“›og.date.formatted())
                } footer: {
                    if â“›og.canceled {
                        Text("Canceled")
                    }
                }
            }
            
            if ðŸ“±.ðŸ’½LocalHistory.â“›ogs.isEmpty {
                Text("No log")
                    .font(.headline)
                    .foregroundStyle(.tertiary)
            }
            
            ðŸ•˜LocalHistoryBeforeVer_1_2_Link()
        }
        .navigationTitle("Local History")
        .toolbar { //TODO: WIP
            ToolbarItem(placement: .navigationBarTrailing) {
                Button {
                    withAnimation {
                        ðŸ“±.ðŸ’½LocalHistory.â“›ogs.removeAll()
                    }
                } label: {
                    Image(systemName: "trash")
                        .tint(.red)
                }
            }
        }
    }
    
    struct ðŸ„»ogRows: View {
        var â“›og: ðŸ’½Log
        
        var body: some View {
            if let entry = â“›og.entry {
                if â“›og.date.timeIntervalSince(entry.date) > 300 {
                    Label(entry.date.formatted(), systemImage: "clock")
                        .foregroundColor(.primary)
                }
                
                ForEach(entry.samples) { sample in
                    Text(sample.type)
                        .strikethrough(entry.cancellation)
                        .badge(sample.value)
                }
            }
            
            if let comment = â“›og.comment {
                Text(comment)
            }
        }
        
        init(_ â“›og: ðŸ’½Log) {
            self.â“›og = â“›og
        }
    }
}


struct ðŸ’½LocalHistoryModel {
    var â“›ogs: [ðŸ„»og] = [] {
        didSet {
            do {
                UserDefaults.standard.set(try JSONEncoder().encode(â“›ogs), forKey: "LocalHistory")
            } catch {
                print("ðŸš¨Error: ", error)
            }
        }
    }
    
    init() {
        if let ðŸ’¾ = UserDefaults.standard.data(forKey: "LocalHistory") {
            do {
                â“›ogs = try JSONDecoder().decode([ðŸ„»og].self, from: ðŸ’¾)
            } catch {
                print("ðŸš¨Error: ", error)
            }
        }
    }
    
    struct ðŸ„»og: Codable, Identifiable {
        var date: Date = .now
        var entry: ðŸ„´ntry? = nil
        var comment: String? = nil
        var id: Date { date }
        
        struct ðŸ„´ntry: Codable {
            var date: Date
            var samples: [ðŸ…‚ample] = []
            var cancellation: Bool = false
            
            struct ðŸ…‚ample: Codable, Identifiable {
                var type: String
                var value: String
                var id: String { type }
            }
            
            mutating func addSample(_ type: String, _ value: String) {
                samples.append(ðŸ…‚ample(type: type, value: value))
            }
        }
        
        var canceled: Bool { entry?.cancellation == true }
    }
    
    mutating func addLog(_ entry: ðŸ’½Entry) {
        â“›ogs.append(ðŸ„»og(entry: entry))
    }
    
    mutating func addLog(_ comment: String) {
        â“›ogs.append(ðŸ„»og(comment: comment))
    }
    
    mutating func modifyCancellation() {
        var â“›og = â“›ogs.popLast()!
        â“›og.entry?.cancellation = true
        â“›ogs.append(â“›og)
    }
}

typealias ðŸ’½Log = ðŸ’½LocalHistoryModel.ðŸ„»og
typealias ðŸ’½Entry = ðŸ’½LocalHistoryModel.ðŸ„»og.ðŸ„´ntry





struct ðŸ•˜LocalHistoryBeforeVer_1_2_Link: View {
    @AppStorage("History") var ðŸ•˜History: String = ""
    
    var body: some View {
        if ðŸ•˜History != "" {
            NavigationLink("Old data before ver 1.2") {
                ðŸ•˜MainView()
            }
        }
    }
    
    struct ðŸ•˜MainView: View {
        @AppStorage("History") var ðŸ•˜History: String = ""
        
        var body: some View {
            VStack (spacing: 0) {
                if ðŸ•˜History == "" {
                    Spacer()
                    
                    Image(systemName: "text.append")
                        .foregroundStyle(.tertiary)
                        .font(.system(size: 64))
                        .navigationTitle("History")
                        .navigationBarTitleDisplayMode(.inline)
                    
                    Spacer()
                } else {
                    ScrollView {
                        ScrollView(.horizontal, showsIndicators: false) {
                            Text(ðŸ•˜History)
                                .padding()
                        }
                    }
                    .navigationBarTitle("History")
                    .navigationBarTitleDisplayMode(.inline)
                    .font(.caption.monospaced())
                    .textSelection(.enabled)
                }
                
                Color.secondary
                    .frame(height: 0.4)
                
                Text("\"Local history\" is for the porpose of \"operation check\" / \"temporary backup\"")
                    .font(.caption)
                    .foregroundStyle(.secondary)
                    .padding(24)
            }
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button {
                        ðŸ•˜History = ""
                    } label: {
                        Image(systemName: "trash")
                            .tint(.red)
                    }
                }
            }
        }
    }
}
